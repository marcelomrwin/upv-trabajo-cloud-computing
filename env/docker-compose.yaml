version: "3.9"

networks:
  kafka_network:
    name: kafka_network

services:

  zookeeper:
    image: docker.io/bitnami/zookeeper:3.8
    container_name: zookeeper
    restart: always
    ports:
      - "2181:2181"
    volumes:
      - "zookeeper_data:/bitnami"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - kafka_network

  kafka:
    image: docker.io/bitnami/kafka:3.3
    container_name: kafka
    hostname: kafka
    restart: always
    ports:
      - 19092:19092
      - 9997:9997
    volumes:
      - "kafka_data:/bitnami"
    environment:
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      ALLOW_PLAINTEXT_LISTENER: yes
      KAFKA_CFG_LOG_RETENTION_HOURS: 24
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,CONNECTIONS_FROM_HOST://localhost:19092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONNECTIONS_FROM_HOST:PLAINTEXT
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONNECTIONS_FROM_HOST://:19092
      KAFKA_CFG_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_CFG_NUM_PARTITIONS: 3
      KAFKA_CFG_MESSAGE_MAX_BYTES: 5242940
    depends_on:
      - zookeeper
    networks:
      - kafka_network
    healthcheck:
      test: ["CMD","kafka-topics.sh","--list","--bootstrap-server","host.docker.internal:19092"]
      interval: 10s
      timeout: 50s
      retries: 5

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:v0.4.0
    restart: unless-stopped
    ports:
      - 9080:8080
    depends_on:
      zookeeper:
        condition: service_started
      kafka:
        condition: service_healthy
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_METRICS_PORT: 9997
      LOGGING_LEVEL_ROOT: error
    networks:
      - kafka_network

  minio:
    container_name: Minio
    command: server /data --console-address ":9001"
    image: quay.io/minio/minio:latest
    ports:
      - '9000:9000'
      - '9001:9001'
    volumes:
      - minion_data:/data
    restart: unless-stopped
    depends_on:
      zookeeper:
        condition: service_started
      kafka:
        condition: service_healthy

  mongodb-executor:
    image: mongo:5.0
    container_name: mongodb-executor
    hostname: mongodb-executor
    restart: always
    ports:
      - 27017:27017
    environment:
      - TZ=Europe/Madrid
      - MONGO_INITDB_DATABASE=executordb
      - DB_NAME=executordb
    volumes:
      - mongoexecutor_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    depends_on:
      zookeeper:
        condition: service_started
      kafka:
        condition: service_healthy

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 9081:8081
    depends_on:
      mongodb-executor:
        condition: service_started
      zookeeper:
        condition: service_started
      kafka:
        condition: service_healthy
    environment:
      ME_CONFIG_MONGODB_URL: mongodb://${ME_CONFIG_MONGODB_ADMINUSERNAME}:${ME_CONFIG_MONGODB_ADMINPASSWORD}@mongodb-executor:27017/

  postgres-injector:
    image: postgres:13
    container_name: postgres-injector
    hostname: postgres-injector
    ports:
      - 5433:5432
    environment:
      - TZ=Europe/Madrid
      - POSTGRES_DB=newsdb
    volumes:
      - pginjector_data:/var/lib/postgresql/data

  postgres-api:
    image: postgres:13
    container_name: postgres-api
    hostname: postgres-api
    ports:
      - 5434:5432
    environment:
      - TZ=Europe/Madrid
      - POSTGRES_DB=apidb
    volumes:
      - pgapi_data:/var/lib/postgresql/data

  pgadmin:
    container_name: pgadmin4
    image: dpage/pgadmin4:6
    restart: unless-stopped
    environment:
      PGADMIN_CONFIG_CONSOLE_LOG_LEVEL: 50
      PGADMIN_CONFIG_FILE_LOG_LEVEL: 50
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    depends_on:
      - postgres-injector
      - postgres-api
    ports:
      - "9082:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin

  redis:
    container_name: redis
    image: redis:7.0.7-alpine
    hostname: redis
    ports:
      - 6379:6379
    restart: always
    ulimits:
      memlock:
        soft: -1
        hard: -1
    mem_swappiness: 0
    volumes:
      - cache:/data

  redisinsight:
    container_name: redisinsight
    image: redislabs/redisinsight
    hostname: redisinsight
    ports:
      - 9085:8001
    volumes:
      - redisinsight_data:/db

## Keycloak
  postgres-keycloak:
    image: postgres:13
    container_name: postgres-keycloak
    hostname: postgres-keycloak
    ports:
      - 5432:5432
    volumes:
      - postgres_keycloak_data:/var/lib/postgresql/data
    environment:
      - TZ=Europe/Madrid
      - POSTGRES_DB=keycloak
      - POSTGRES_USER=keycloak
      - POSTGRES_PASSWORD=password

  keycloak:
    image: quay.io/keycloak/keycloak:20.0
    container_name: keycloak
    hostname: keycloak
    depends_on:
      - postgres-keycloak
    restart: always
    ports:
      - 8180:8080
      - 8543:8443
    volumes:
      - ./realm:/opt/keycloak/data/import
    command: start-dev --import-realm
    environment:
      TZ: Europe/Madrid
      KC_HEALTH_ENABLED: true
      KC_METRICS_ENABLED: true
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_LOG: console,file
      KC_LOG_LEVEL: INFO,org.keycloak.transaction:warn,org.keycloak.services.scheduled:warn,org.hibernate:info,org.infinispan.protostream:info
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres-keycloak:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: password
      KC_DB_POOL_INITIAL_SIZE: 1
      KC_DB_POOL_MIN_SIZE: 1
      KC_DB_POOL_MAX_SIZE: 5

volumes:
  minion_data:
  mongoexecutor_data:
  pginjector_data:
  pgapi_data:
  pgadmin_data:
  kafka_data:
  zookeeper_data:
  cache:
  redisinsight_data:
  postgres_keycloak_data: