version: "3.9"

networks:
  kafka_network:
    name: kafka_network

services:

  api-app:
    image: marcelodsales/api-app
    container_name: api-app
    hostname: api-app
    restart: always
    ports:
      - "8091:80"
    environment:
      - KEYCLOAK_BASE_URL=${KEYCLOAK_BASE_URL}
      - API_URL_BASE=${API_URL_BASE}
      - API_ENDPOINT=${API_ENDPOINT}/api
    depends_on:
      zookeeper:
        condition: service_started
      kafka:
        condition: service_healthy
      api:
        condition: service_started

  api:
    image: marcelodsales/api
    container_name: api
    hostname: api
    restart: always
    ports:
      - ${API_HTTP_PORT}:8080
    environment:
      - API_HTTP_PORT=${API_HTTP_PORT}
      - API_DB_HOST=${API_DB_HOST}
      - API_DB_USER=${API_DB_USER}
      - API_DB_PASSWORD=${API_DB_PASSWORD}
      - API_DB_PORT=${API_DB_PORT}
      - API_DB_NAME=${API_DB_NAME}
      - KEYCLOAK_ENDPOINT=${KEYCLOAK_ENDPOINT}
      - API_KEYCLOAK_CLIENT_ID=${API_KEYCLOAK_CLIENT_ID}
      - API_KEYCLOAK_CLIENT_SECRET=${API_KEYCLOAK_CLIENT_SECRET}
      - KAFKA_SERVERS=${KAFKA_SERVERS}
    depends_on:
      zookeeper:
        condition: service_started
      kafka:
        condition: service_healthy
      postgres-api:
        condition: service_started
    links:
      - keycloak:localhost

  postgres-api:
    image: ${POSTGRES_IMAGE:-postgres:13}
    container_name: postgres-api
    hostname: postgres-api
    environment:
      - TZ=Europe/Madrid
      - POSTGRES_DB=${API_DB_NAME:-apidb}
      - POSTGRES_PASSWORD=${API_DB_PASSWORD}
      - POSTGRES_USER=${API_DB_USER}
    volumes:
      - pgapi_data:/var/lib/postgresql/data

  injector:
    image: marcelodsales/injector
    container_name: injector
    hostname: injector
    restart: always
    ports:
      - ${INJECTOR_HTTP_PORT}:8080
    environment:
      - TZ=Europe/Madrid
      - INJECTOR_CRON=${INJECTOR_CRON}
      - INJECTOR_DB_USER=${INJECTOR_DB_USER}
      - INJECTOR_DB_PASSWORD=${INJECTOR_DB_PASSWORD}
      - INJECTOR_DB_HOST=${INJECTOR_DB_HOST}
      - INJECTOR_DB_PORT=${INJECTOR_DB_PORT}
      - INJECTOR_DB_NAME=${INJECTOR_DB_NAME}
      - INJECTOR_HTTP_PORT=${INJECTOR_HTTP_PORT}
      - INJECTOR_MEDIASTACK_APIKEY=${INJECTOR_MEDIASTACK_APIKEY}
      - INJECTOR_MEDIASTACK_URL=${INJECTOR_MEDIASTACK_URL}
      - INJECTOR_NEWSAPI_APIKEY=${INJECTOR_NEWSAPI_APIKEY}
      - INJECTOR_NEWSAPI_URL=${INJECTOR_NEWSAPI_URL}
      - INJECTOR_NEWSDATA_APIKEY=${INJECTOR_NEWSDATA_APIKEY}
      - INJECTOR_NEWSDATA_URL=${INJECTOR_NEWSDATA_URL}
      - MINIO_ENDPOINT=${MINIO_ENDPOINT}
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - REDIS_ENDPOINT=${REDIS_ENDPOINT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - KAFKA_SERVERS=${KAFKA_SERVERS}
    depends_on:
      zookeeper:
        condition: service_started
      kafka:
        condition: service_healthy
      postgres-injector:
        condition: service_started

  postgres-injector:
    image: ${POSTGRES_IMAGE:-postgres:13}
    container_name: postgres-injector
    hostname: postgres-injector
    environment:
      - TZ=Europe/Madrid
      - POSTGRES_DB=${INJECTOR_DB_NAME:-newsdb}
      - POSTGRES_USER=${INJECTOR_DB_USER}
      - POSTGRES_PASSWORD=${INJECTOR_DB_PASSWORD}
    volumes:
      - pginjector_data:/var/lib/postgresql/data

  zookeeper:
    image: docker.io/bitnami/zookeeper:3.8
    container_name: zookeeper
    restart: always
    ports:
      - "2181:2181"
    volumes:
      - "zookeeper_data:/bitnami"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  kafka:
    image: docker.io/bitnami/kafka:3.3
    container_name: kafka
    hostname: kafka
    restart: always
    volumes:
      - "kafka_data:/bitnami"
    environment:
      KAFKA_CFG_ZOOKEEPER_CONNECT: ${KAFKA_ZOOKEEPER_URL:-zookeeper:2181}
      ALLOW_PLAINTEXT_LISTENER: yes
      KAFKA_CFG_LOG_RETENTION_HOURS: ${KAFKA_RETENTION_HOURS:-24}
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:${KAFKA_PORT}
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONNECTIONS_FROM_HOST:PLAINTEXT
      KAFKA_CFG_LISTENERS: PLAINTEXT://:${KAFKA_PORT}
      KAFKA_CFG_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_CFG_NUM_PARTITIONS: ${KAFKA_DEFAULT_PARTITIONS:-3}
      KAFKA_CFG_MESSAGE_MAX_BYTES: 10485880
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD","kafka-topics.sh","--list","--bootstrap-server","kafka:9092"]
      interval: 10s
      timeout: 50s
      retries: 5

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:v0.4.0
    restart: unless-stopped
    ports:
      - 9080:8080
    depends_on:
      zookeeper:
        condition: service_started
      kafka:
        condition: service_healthy
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:${KAFKA_PORT}
      KAFKA_CLUSTERS_0_METRICS_PORT: 9997
      LOGGING_LEVEL_ROOT: error
      LOGGING_LEVEL_COM_PROVECTUS: error

  minio:
    container_name: minio
    hostname: minio
    command: server /data --console-address ":9001"
    image: quay.io/minio/minio:latest
    ports:
      - '9001:9001'
    volumes:
      - minion_data:/data
    restart: unless-stopped
    depends_on:
      zookeeper:
        condition: service_started
      kafka:
        condition: service_healthy
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}

  mongodb-executor:
    image: mongo:4.4
    container_name: mongodb-executor
    hostname: mongodb-executor
    restart: always
    ports:
      - "27017:27017"
    environment:
      - TZ=Europe/Madrid
      - MONGO_INITDB_ROOT_USERNAME=${MONGODB_INIT_ROOT_USER:-root}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_INIT_ROOT_PASSWD:-root}
      - MONGO_INITDB_DATABASE=${MONGODB_DB_NAME:-executordb}
      - MONGO_INITDB_USER=${MONGODB_DB_USER:-mongoadmin}
      - MONGO_INITDB_PWD=${MONGODB_DB_PASSWORD:-mongopasswd}
    volumes:
      - mongoexecutor_data_4:/data/db
      - ./docker-entrypoint-initdb.d/:/docker-entrypoint-initdb.d/
    depends_on:
      zookeeper:
        condition: service_started
      kafka:
        condition: service_healthy

  mongo-express:
    image: mongo-express
    restart: unless-stopped
    ports:
      - "9081:8081"
    depends_on:
      mongodb-executor:
        condition: service_started
      zookeeper:
        condition: service_started
      kafka:
        condition: service_healthy
    environment:
      ME_CONFIG_MONGODB_URL: mongodb://${MONGODB_INIT_ROOT_USER}:${MONGODB_INIT_ROOT_PASSWD}@mongodb-executor:27017/

  pgadmin:
    container_name: pgadmin4
    image: dpage/pgadmin4:6
    restart: unless-stopped
    environment:
      PGADMIN_CONFIG_CONSOLE_LOG_LEVEL: 50
      PGADMIN_CONFIG_FILE_LOG_LEVEL: 50
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_DEFAULT_EMAIL: admin@mail.com
      PGADMIN_DEFAULT_PASSWORD: password
    depends_on:
      - postgres-injector
      - postgres-api
    ports:
      - "9082:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin

  redis:
    container_name: redis
    image: redis:7.0.7-alpine
    hostname: redis
    ports:
      - "6379:6379"
    restart: always
    ulimits:
      memlock:
        soft: -1
        hard: -1
    mem_swappiness: 0
    volumes:
      - cache:/data

  redisinsight:
    container_name: redisinsight
    image: redislabs/redisinsight
    hostname: redisinsight
    ports:
      - 9085:8001
    volumes:
      - redisinsight_data:/db

## Keycloak
  postgres-keycloak:
    image: ${POSTGRES_IMAGE:-postgres:13}
    container_name: postgres-keycloak
    hostname: postgres-keycloak
    ports:
      - ${KEYCLOAK_DB_PORT:-5432}:5432
    volumes:
      - postgres_keycloak_data:/var/lib/postgresql/data
    environment:
      - TZ=Europe/Madrid
      - POSTGRES_DB=${KEYCLOAK_DB_NAME:-keycloak}
      - POSTGRES_USER=${KEYCLOAK_DB_USER:-keycloak}
      - POSTGRES_PASSWORD=${KEYCLOAK_DB_PASSWORD:-password}

  keycloak:
    image: quay.io/keycloak/keycloak:20.0
    container_name: keycloak
    hostname: keycloak
    depends_on:
      - postgres-keycloak
    restart: always
    ports:
      - ${KEYCLOAK_HTTP_PORT:-8180}:${KEYCLOAK_HTTP_PORT}
      - ${KEYCLOAK_HTTPS_PORT:-8543}:${KEYCLOAK_HTTPS_PORT}
    volumes:
      - ./realm:/opt/keycloak/data/import
    command: start-dev --import-realm --auto-build --http-enabled=true --hostname-strict-https=false --hostname-strict=false --proxy=edge
    environment:
      TZ: Europe/Madrid
      KC_HEALTH_ENABLED: true
      KC_METRICS_ENABLED: true
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN_USER:-admin}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD:-admin}
      KC_LOG: console,file
      KC_LOG_LEVEL: INFO,org.keycloak.transaction:warn,org.keycloak.services.scheduled:warn,org.hibernate:info,org.infinispan.protostream:info
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://${KEYCLOAK_DB_HOST:-postgres-keycloak}:${KEYCLOAK_DB_PORT:-5432}/${KEYCLOAK_DB_NAME:-keycloak}
      KC_DB_USERNAME: ${KEYCLOAK_DB_USER:-keycloak}
      KC_DB_PASSWORD: ${KEYCLOAK_DB_PASSWORD:-password}
      KC_DB_POOL_INITIAL_SIZE: 1
      KC_DB_POOL_MIN_SIZE: 1
      KC_DB_POOL_MAX_SIZE: 5
      KC_HTTP_PORT: ${KEYCLOAK_HTTP_PORT}

volumes:
  minion_data:
    name: uat_minion_data
  mongoexecutor_data:
    name: uat_mongoexecutor_data
  mongoexecutor_data_4:
    name: uat_mongoexecutor4_data
  pginjector_data:
    name: uat_pginjector_data
  pgapi_data:
    name: uat_pgapi_data
  pgadmin_data:
    name: uat_pgadmin_data
  kafka_data:
    name: uat_kafka_data
  zookeeper_data:
    name: uat_zookeeper_data
  cache:
    name: uat_cache
  redisinsight_data:
    name: uat_redisinsight_data
  postgres_keycloak_data:
    name: uat_postgres_keycloak_data